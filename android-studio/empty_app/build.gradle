apply plugin: 'com.android.model.application'

def sdl2 = file(System.env.SDL2SRCDIR)
def sdl2image = file(System.env.SDL2IMAGESRCDIR)

model {
    android {
        compileSdkVersion = 21
        buildToolsVersion ="22.0.1"

        defaultConfig.with {
            applicationId = "com.android.lantern.empty_app"
            minSdkVersion.apiLevel      = 9
            targetSdkVersion.apiLevel   = 9
        }
    }
    /*
     * native build settings
     */
    android.ndk {
        moduleName = "EmptyAppNativeActivity"

        cppFlags += "-std=c++11"
        cppFlags += "-Wall"
        cppFlags += "-Wno-comment"
        cppFlags += "-Werror"
        cppFlags += "-fexceptions"
        ldLibs = ["android", "log", "EGL", "GLESv1_CM"]
        stl = "gnustl_static"

        cppFlags += "-I${file("../../lantern/include")}".toString()
        cppFlags += "-I${file("../../lantern/include/math")}".toString()
        cppFlags += "-I${file("../../lantern/include/rendering")}".toString()
        cppFlags += "-I${file("../../lantern/include/rendering/geometry")}".toString()
        cppFlags += "-I${file("../../lantern/include/rendering/rasterizing")}".toString()
        cppFlags += "-I${file("../../lantern/include/rendering/shaders")}".toString()
        cppFlags += "-I${file("../../examples/empty_app")}".toString()

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkdir = properties.getProperty('ndk.dir', null)

        CFlags += "-I${file("${sdl2}/src")}".toString()
        CFlags += "-I${file("${sdl2}/include")}".toString()
        CFlags += "-I${file("${sdl2image}")}".toString()
        CFlags += "-I${file("${ndkdir}/sources/android/native_app_glue")}".toString()

        cppFlags += "-I${file("${sdl2}/src")}".toString()
        cppFlags += "-I${file("${sdl2}/include")}".toString()
        cppFlags += "-I${file("${sdl2image}")}".toString()
        cppFlags += "-I${file("${ndkdir}/sources/android/native_app_glue")}".toString()

        //println file('../../lantern/include').toString()
      }
    android.sources {
        main {
            jni {
                source {
                    Properties properties = new Properties()
                    properties.load(project.rootProject.file('local.properties').newDataInputStream())
                    def ndkdir = properties.getProperty('ndk.dir', null)

                    srcDirs file('../../lantern/src'), file('../../examples/empty_app'), file('${sdl2}/src'), file('${sdl2image}'), file('${ndkdir}/sources/android/native_app_glue')

                    include '**/*.c'
                    include '**/*.cpp'

                    // <== sdl2 excludes
                    exclude '**/test/*'

                    exclude '**/audio/alsa/*'
                    exclude '**/audio/arts/*'
                    exclude '**/audio/bsd/*'
                    exclude '**/audio/coreaudio/*'
                    exclude '**/audio/directsound/*'
                    exclude '**/audio/disk/*'
                    exclude '**/audio/dsp/*'
                    exclude '**/audio/esd/*'
                    exclude '**/audio/fusionsound/*'
                    exclude '**/audio/haiku/*'
                    exclude '**/audio/nas/*'
                    exclude '**/audio/paudio/*'
                    exclude '**/audio/psp/*'
                    exclude '**/audio/pulseaudio/*'
                    exclude '**/audio/qsa/*'
                    exclude '**/audio/sndio/*'
                    exclude '**/audio/sun/*'
                    exclude '**/audio/winmm/*'
                    exclude '**/audio/xaudio2/*'

                    exclude '**/audio/core/linux/*'
                    exclude '**/audio/core/windows/*'
                    exclude '**/audio/core/winrt/*'

                    exclude '**/file/cocoa/*'

                    exclude '**/filesystem/cocoa/*'
                    exclude '**/filesystem/dummy/*'
                    exclude '**/filesystem/haiku/*'
                    exclude '**/filesystem/unix/*'
                    exclude '**/filesystem/windows/*'
                    exclude '**/filesystem/winrt/*'

                    exclude '**/haptic/darwin/*'
                    exclude '**/haptic/dummy/*'
                    exclude '**/haptic/linux/*'
                    exclude '**/haptic/windows/*'

                    exclude '**/joystick/android/*'
                    exclude '**/joystick/bsd/*'
                    exclude '**/joystick/darwin/*'
                    exclude '**/joystick/dummy/*'
                    exclude '**/joystick/haiku/*'
                    exclude '**/joystick/iphoneos/*'
                    exclude '**/joystick/linux/*'
                    exclude '**/joystick/psp/*'
                    exclude '**/joystick/windows/*'
                    exclude '**/joystick/winrt/*'

                    exclude '**/loadso/dlopen/*'
                    exclude '**/loadso/dummy/*'
                    exclude '**/loadso/haiku/*'
                    exclude '**/loadso/windows/*'

                    exclude '**/main/dummy/*'
                    exclude '**/main/haiku/*'
                    exclude '**/main/psp/*'
                    exclude '**/main/windows/*'
                    exclude '**/main/winrt/*'

                    exclude '**/power/android/*'
                    exclude '**/power/haiku/*'
                    exclude '**/power/linux/*'
                    exclude '**/power/macosx/*'
                    exclude '**/power/psp/*'
                    exclude '**/power/uikit/*'
                    exclude '**/power/windows/*'
                    exclude '**/power/winrt/*'

                    exclude '**/render/direct3d/*'
                    exclude '**/render/direct3d11/*'
                    exclude '**/render/opengl/*'
                    exclude '**/render/opengles/*'
                    exclude '**/render/opengles2/*'
                    exclude '**/render/psp/*'
                    exclude '**/render/software/*'
                    exclude '**/thread/generic/*'
                    exclude '**/thread/psp/*'
                    exclude '**/thread/pthread/*'
                    exclude '**/thread/stdcpp/*'
                    exclude '**/thread/windows/*'
                    exclude '**/timer/dummy/*'
                    exclude '**/timer/haiku/*'
                    exclude '**/timer/psp/*'
                    exclude '**/timer/unix/*'
                    exclude '**/timer/windows/*'

                    //exclude '**/video/android/*'

                    exclude '**/video/cocoa/*'
                    exclude '**/video/directfb/*'
                    exclude '**/video/dummy/*'
                    exclude '**/video/haiku/*'
                    exclude '**/video/mir/*'
                    exclude '**/video/pandora/*'
                    exclude '**/video/psp/*'
                    exclude '**/video/raspberry/*'
                    exclude '**/video/uikit/*'
                    exclude '**/video/wayland/*'
                    exclude '**/video/windows/*'
                    exclude '**/video/winrt/*'
                    exclude '**/video/x11/*'
                    // ==> sdl2 excludes

                    // <== sdl2_image excludes
                    exclude '**/acinclude/*'
                    exclude '**/debian/*'
                    exclude '**/external/*'
                    exclude '**/VisualC/*'
                    exclude '**/VisualCE/*'
                    exclude '**/Xcode/*'
                    exclude '**/Xcode-iOS/*'
                    // ==> sdl2_image excludes

                    println getFiles()
                }
            }
        }
    }
    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles  += file('proguard-rules.txt')
        }
    }
    android.productFlavors {
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa
        create("arm") {
            ndk.abiFilters += "armeabi"
        }
        create("arm7") {
            ndk.abiFilters += "armeabi-v7a"
        }
        create("arm8") {
            ndk.abiFilters += "arm64-v8a"
        }
        create("x86") {
            ndk.abiFilters += "x86"
        }
        create("x86-64") {
            ndk.abiFilters += "x86_64"
        }
        create("mips") {
            ndk.abiFilters += "mips"
        }
        create("mips-64") {
            ndk.abiFilters += "mips64"
        }
        // To include all cpu architectures, leaves abiFilters empty
        create("all")
    }
}
