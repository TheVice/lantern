/*
 * This build file was auto generated by running the Gradle 'init' task
 * For more details take a look at the Gradle user guide
 */

apply plugin: 'cpp'

model {
  components {
    lantern(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDir 'lantern/src'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDir 'lantern/include'
            srcDirs file(SDL2SRCDIR.toString() + '/include'), file(SDL2IMAGESRCDIR.toString()), file(FREETYPESRCDIR.toString() + '/include')
          }
        }
      }
    }
  }
}

binaries.all {
  if (toolChain in Gcc) {
    cppCompiler.args '-std=gnu++0x', '-Wall', '-Wno-comment'
  }
  if (toolChain in VisualCpp) {
    cppCompiler.define '_USE_MATH_DEFINES'
    cppCompiler.define 'NOMINMAX'

    // <--
    if (file(System.getenv('ProgramFiles').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').exists()) {
      println('ProgramFiles')
      cppCompiler.args '/I' + file(System.getenv('ProgramFiles').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').toString()
    }
    else if (file(System.getenv('ProgramFiles(x86)').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').exists()) {
      println('ProgramFiles(x86)')
      cppCompiler.args '/I' + file(System.getenv('ProgramFiles(x86)').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').toString()
    }
    else if (file(System.getenv('ProgramW6432').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').exists()) {
      println('ProgramW6432')
      cppCompiler.args '/I' + file(System.getenv('ProgramW6432').toString() + '/Windows Kits/10/Include/10.0.10150.0/ucrt').toString()
    }

    /*println toolChain.DEFAULT_NAME
    println toolChain.getWindowsSdkDir()
    println toolChain.getInstallDir()
    println toolChain.getName()
    println toolChain*/
    // -->
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.5'
}

try {
  SDL2SRCDIR.toString()
} catch (MissingPropertyException e) {
  throw new GradleException('Path to source dir of SDL2 library not set. Try to call \'gradlew -PSDL2SRCDIR=<Path to SDL2 source dir>\'')
}

try {
  SDL2IMAGESRCDIR.toString()
} catch (MissingPropertyException e) {
  throw new GradleException('Path to source dir of SDL2 Image library not set. Try to call \'gradlew -PSDL2IMAGESRCDIR=<Path to SDL2 image source dir>\'')
}

try {
  FREETYPESRCDIR.toString()
} catch (MissingPropertyException e) {
  throw new GradleException('Path to source dir of FreeType library not set. Try to call \'gradlew -PFREETYPESRCDIR=<Path to FreeType source dir>\'')
}
